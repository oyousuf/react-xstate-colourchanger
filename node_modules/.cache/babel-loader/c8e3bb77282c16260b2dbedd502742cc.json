{"ast":null,"code":"import _objectSpread from \"C:/Users/User/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\nimport \"./styles.scss\";\nconst cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction help(prompt, name) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: name + \".hist\"\n    }\n  };\n}\n\nfunction speech(prompt) {\n  return {\n    entry: say(prompt),\n    on: {\n      ENDSPEECH: \"ask\"\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, prompt_a) {\n  return {\n    initial: \"prompt\",\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: \"ask\"\n        }\n      },\n      hist: {\n        type: \"history\"\n      },\n      maxspeech: _objectSpread({}, speech(prompt_a)),\n      ask: {\n        entry: [listen(), send('MAXSPEECH', {\n          delay: 6000\n        })]\n      }\n    }\n  };\n}\n\nconst grammar = {\n  //name of example pokemon \n  \"Pikachu\": {\n    pokemon: \"Pikachu\"\n  },\n  \"Bulbasaur\": {\n    pokemon: \"Bulbasaur\"\n  },\n  \"Charmander\": {\n    pokemon: \"Charmander\"\n  },\n  \"Squirtle\": {\n    pokemon: \"Squirtle\"\n  },\n  \"Mew\": {\n    pokemon: \"Mew\"\n  },\n  \"Mewtwo\": {\n    pokemon: \"Mewtwo\"\n  },\n  \"Seel\": {\n    pokemon: \"Seel\"\n  },\n  \"Dewgong\": {\n    pokemon: \"Dewgong\"\n  },\n  \"Jynx\": {\n    pokemon: \"Jynx\"\n  },\n  \"Eevee\": {\n    pokemon: \"Eevee\"\n  },\n  \"Snorlax\": {\n    pokemon: \"Snorlax\"\n  },\n  \"Slowking\": {\n    pokemon: \"Slowking\"\n  },\n  \"Butterfree\": {\n    pokemon: \"Butterfree\"\n  },\n  \"Ninetails\": {\n    pokemon: \"Ninetails\"\n  },\n  \"Psyduck\": {\n    pokemon: \"Psyduck\"\n  },\n  \"Kadabra\": {\n    pokemon: \"Kadabra\"\n  },\n  \"Golem\": {\n    pokemon: \"Golem\"\n  },\n  \"Seaking\": {\n    pokemon: \"Seaking\"\n  },\n  \"Mister Mime\": {\n    pokemon: \"Mister Mime\"\n  },\n  //region or real life country \n  \"Göteborg\": {\n    place: \"Göteborg, Sweden\"\n  },\n  \"Stockholm\": {\n    place: \"Stockholm, Sweden\"\n  },\n  \"Ilsan\": {\n    place: \"Ilsan, South Korea\"\n  },\n  \"Allen\": {\n    place: \"Allen, United States\"\n  },\n  \"Cairo\": {\n    place: \"Cairo, Egypt\"\n  },\n  \"Seoul\": {\n    place: \"Seoul, South Korea\"\n  },\n  \"Addis Ababa\": {\n    place: \"Addis Ababa, Ethiopia\"\n  },\n  \"Patras\": {\n    place: \"Patras, Greece\"\n  },\n  \"Suzhou\": {\n    place: \"Suzhou, China\"\n  },\n  \"Lima\": {\n    place: \"Lima, Peru\"\n  },\n  \"Mexico City\": {\n    place: \"Mexico City, Mexico\"\n  },\n  \"Bangkok\": {\n    place: \"Bangkok, Thailand\"\n  },\n  \"Bucharest\": {\n    place: \"Bucharest, Romania\"\n  },\n  \"Dhaka\": {\n    place: \"Dhaka, Bangladesh\"\n  },\n  \"Kabul\": {\n    place: \"Kabul, Afghanistan\"\n  },\n  \"Kingston\": {\n    place: \"Kingston, Jamaica\"\n  },\n  //in-game region names from pokemon franchise\n  \"Kanto\": {\n    place: \"Kanto Region\"\n  },\n  \"Johto\": {\n    place: \"Johto Region\"\n  },\n  \"Hoenn\": {\n    place: \"Hoenn Region\"\n  },\n  \"Sinnoh\": {\n    place: \"Sinnoh Region\"\n  },\n  \"Unova\": {\n    place: \"Unova Region\"\n  },\n  \"Kalos\": {\n    place: \"Kalos Region\"\n  },\n  \"Alola\": {\n    place: \"Alola Region\"\n  },\n  \"Galar\": {\n    place: \"Galar Region\"\n  },\n  //routes in region\n  // Route 20\n  // Route 8 \n  // Route 7 \n  // Route 13 \n  // Route 213 \n  // Route 4\n  // Route 113\n  // Route 36 \n  //time \n  \"one\": {\n    level: \"1\"\n  },\n  \"two\": {\n    level: \"2\"\n  },\n  \"three\": {\n    level: \"3\"\n  },\n  \"four\": {\n    level: \"4\"\n  },\n  \"five\": {\n    level: \"5\"\n  },\n  \"six\": {\n    level: \"6\"\n  },\n  \"seven\": {\n    level: \"7\"\n  },\n  \"eight\": {\n    level: \"8\"\n  },\n  \"nine\": {\n    level: \"9\"\n  },\n  \"ten\": {\n    level: \"10\"\n  },\n  \"eleven\": {\n    level: \"11\"\n  },\n  \"twelve\": {\n    level: \"12\"\n  },\n  \"thirteen\": {\n    level: \"13\"\n  },\n  \"fourteen\": {\n    level: \"14\"\n  },\n  \"fifteen\": {\n    level: \"15\"\n  },\n  \"sixteen\": {\n    level: \"16\"\n  },\n  \"seventeen\": {\n    level: \"17\"\n  },\n  \"eighteen\": {\n    level: \"18\"\n  },\n  \"nineteen\": {\n    level: \"19\"\n  },\n  \"twenty\": {\n    level: \"20\"\n  },\n  \"twenty one\": {\n    level: \"21\"\n  },\n  \"twenty two\": {\n    level: \"22\"\n  },\n  \"twenty three\": {\n    level: \"23\"\n  },\n  \"twenty four\": {\n    level: \"24\"\n  }\n};\nconst grammar2 = {\n  \"yes\": true,\n  \"Yes\": true,\n  \"Of course\": true,\n  \"of course\": true,\n  \"okay\": true,\n  \"Okay\": true,\n  \"Yup\": true,\n  \"yup\": true,\n  \"Ja\": true,\n  \"ja\": true,\n  \"No\": false,\n  \"no\": false,\n  \"Nej\": false,\n  \"nej\": false,\n  \"No way\": false,\n  \"no way\": false\n};\nconst grammar3 = {\n  \"count\": 0\n};\nconst help_commands = {\n  \"help\": \"Help\",\n  \"Help\": \"Help\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"query\",\n          cond: context => !(context.recResult in help_commands),\n          actions: [assign(context => {\n            return {\n              option: context.recResult\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \"welcome_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Pokedex online. Select feature.\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. What Pokemon have you come across?\")),\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000\n          })]\n        }\n      }\n    },\n    welcome_help: _objectSpread({}, help(\"This is the Pokedex, a repository of information. Please tell me which Pokemon you encountered.\", \"welcome\")),\n    query: {\n      invoke: {\n        id: \"rasa\",\n        src: (context, event) => nluRequest(context.option),\n        onDone: {\n          target: \"menu\",\n          actions: [assign((context, event) => {\n            return {\n              option: event.data.intent.name\n            };\n          }), (context, event) => console.log(event.data), cancel(\"maxsp\")] //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n        },\n        onError: {\n          target: \"welcome\",\n          actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [//{ target: \"todo\", cond: (context) => context.option === \"todo\" },\n        //{ target: \"timer\", cond: (context) => context.option === \"timer\" },\n        {\n          target: \"pokedex\",\n          cond: context => context.option === \"pokedex\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. You chose \".concat(context.option, \".\")\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, please repeat again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    // todo: {\n    //     initial: \"prompt\",\n    //     on: { ENDSPEECH: \"init\" },\n    //     states: {\n    //         prompt: {\n    //             entry: send((context) => ({\n    //                 type: \"SPEAK\",\n    //                 value: `Let\"s create a to do item!`\n    //             }))\n    //         }}\n    // },\n    // timer: {\n    //     initial: \"prompt\",\n    //     on: { ENDSPEECH: \"init\" },\n    //     states: {\n    //         prompt: {\n    //             entry: send((context) => ({\n    //                 type: \"SPEAK\",\n    //                 value: `Let\"s create a timer!`\n    //             }))\n    //         }}\n    // },\n    pokedex: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"pokemon\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Let us make a Pokemon entry into the national Pokedex!\"\n          }))\n        }\n      }\n    },\n    pokemon: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          target: \"place\",\n          cond: context => \"pokemon\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              pokemon: grammar[context.recResult].pokemon\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"pokemon_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Which Pokemon have you seen?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond, what is the Pokemon you have seen?\")),\n        nomatch: {\n          entry: say(\"Sorry I don't know that Pokemon.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    pokemon_help: _objectSpread({}, help(\"Please tell me the name of the pokemon you want to input data for.\", \"pokemon\")),\n    place: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              place: grammar[context.recResult].place\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")],\n          target: \"shiny\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"place_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"You have come across a \".concat(context.pokemon, \". What region have you made this encounter in?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. Which region did you make your encounter in?\")),\n        nomatch: {\n          entry: say(\"Sorry, I don't know which region or place you are talking about\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    place_help: _objectSpread({}, help(\"Please tell me where your encounter was.\", \"place\")),\n    shiny: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"timefixed\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"settime\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"shiny_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Interesting. The encounter was in \".concat(context.place, \". Tell me, was this a shiny Pokemon?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond.\")),\n        nomatch: {\n          entry: say(\"Please answer the question.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    shiny_help: _objectSpread({}, help(\"Please answer the question with yes or no.\", \"shiny\")),\n    timefixed: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"pokemon\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"timefixed_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Superb. Do you want me to confirm an entry with an encounter with a shiny \".concat(context.pokemon, \" in \").concat(context.place, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please, respond. Confirm the Pokedex entry.\")),\n        nomatch: {\n          entry: say(\"Please, repeat it again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    timefixed_help: _objectSpread({}, help(\"Confirm the Pokedex entry, please.\", \"timefixed\")),\n    settime: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              level: grammar[context.recResult].time\n            };\n          }), assign(context => {\n            grammar3[\"count\"] = 0;\n          })],\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"settime_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What level is the Pokemon}?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please respond. What level was the Pokemon you encountered?\")),\n        nomatch: {\n          entry: say(\"Please repeat it again\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    settime_help: _objectSpread({}, help(\"Please, tell me what level the Pokemon was.\", \"settime\")),\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => grammar2[context.recResult] === true,\n          target: \"Finished\",\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }, {\n          cond: context => grammar2[context.recResult] === false,\n          target: \"pokemon\",\n          actions: [assign(context => {\n            grammar3[\"count\"] = 0;\n          }), cancel(\"maxsp\")]\n        }, {\n          target: \".nomatch\",\n          cond: context => !(context.recResult in help_commands),\n          actions: cancel(\"maxsp\")\n        }, {\n          target: \"confirm_time_help\",\n          cond: context => context.recResult in help_commands\n        }],\n        MAXSPEECH: [{\n          target: \".maxspeech\",\n          cond: context => grammar3[\"count\"] <= 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = grammar3[\"count\"] + 1;\n          })\n        }, {\n          target: \"#root.dm.init\",\n          cond: context => grammar3[\"count\"] > 2,\n          actions: assign(context => {\n            grammar3[\"count\"] = 0;\n          })\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Excellent. Do you want me to confirm an entry with an encounter with a level \".concat(context.level, \" \").concat(context.pokemon, \" in \").concat(context.place, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        hist: {\n          type: \"history\"\n        },\n        ask: {\n          entry: [listen(), send('MAXSPEECH', {\n            delay: 6000,\n            id: \"maxsp\"\n          })]\n        },\n        maxspeech: _objectSpread({}, speech(\"Please, confirm the Pokedex entry.\")),\n        nomatch: {\n          entry: say(\"Please, repeat it again.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time_help: _objectSpread({}, help(\"Please, confirm the Pokedex entry.\", \"confirm_time\")),\n    Finished: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Congratulations. Your Pokedex has been updated with your encounter and is one step closer to being completed!\")\n        }\n      }\n    }\n  }\n};\n/* RASA API\n*  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\";\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: \"POST\",\n  headers: {\n    \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\"\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());","map":{"version":3,"sources":["C:/Users/User/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","actions","cancel","say","text","_context","type","value","listen","help","prompt","name","entry","on","ENDSPEECH","speech","promptAndAsk","prompt_a","initial","states","hist","maxspeech","ask","delay","grammar","pokemon","place","level","grammar2","grammar3","help_commands","dmMachine","init","CLICK","welcome","RECOGNISED","target","cond","context","recResult","option","MAXSPEECH","welcome_help","query","invoke","id","src","event","nluRequest","onDone","data","intent","console","log","onError","menu","nomatch","pokedex","pokemon_help","place_help","shiny","shiny_help","timefixed","timefixed_help","settime","time","settime_help","confirm_time","confirm_time_help","Finished","proxyurl","rasaurl","fetch","Request","method","headers","body","then","json"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions} from \"xstate\";\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\n\nconst {cancel} = actions\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction help(prompt: string, name: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: name+\".hist\" }})\n}\n\nfunction speech(prompt: string): MachineConfig<SDSContext, any, SDSEvent>{\n    return ({entry: say(prompt),\n             on: {ENDSPEECH: \"ask\"\n            }})\n}\n\nfunction promptAndAsk(prompt: string, prompt_a:string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            hist : {type: \"history\"},\n            maxspeech: {\n                ...speech(prompt_a)\n            },\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            },\n        }})\n}\n\n\nconst grammar: { [index: string]: { pokemon?: string, place?: string, level?: string } } = {\n\n    //name of example pokemon \n    \"Pikachu\": { pokemon: \"Pikachu\" },\n    \"Bulbasaur\": { pokemon: \"Bulbasaur\" },\n    \"Charmander\": { pokemon: \"Charmander\" },\n    \"Squirtle\": { pokemon: \"Squirtle\" },\n    \"Mew\": { pokemon: \"Mew\" },\n    \"Mewtwo\": { pokemon: \"Mewtwo\" },\n    \"Seel\": { pokemon: \"Seel\" },\n    \"Dewgong\": { pokemon: \"Dewgong\" },\n    \"Jynx\": { pokemon: \"Jynx\" },\n    \"Eevee\": { pokemon: \"Eevee\" },\n    \"Snorlax\": { pokemon: \"Snorlax\" },\n    \"Slowking\": { pokemon: \"Slowking\" },\n    \"Butterfree\": { pokemon: \"Butterfree\" },\n    \"Ninetails\": { pokemon: \"Ninetails\" },\n    \"Psyduck\": { pokemon: \"Psyduck\" },\n    \"Kadabra\": { pokemon: \"Kadabra\" },\n    \"Golem\": { pokemon: \"Golem\" },\n    \"Seaking\": { pokemon: \"Seaking\" },\n    \"Mister Mime\": { pokemon: \"Mister Mime\" },\n\n\n\n\n\n\n\n\n    //region or real life country \n    \"Göteborg\" : { place: \"Göteborg, Sweden\" },\n    \"Stockholm\" : { place: \"Stockholm, Sweden\" },\n    \"Ilsan\" : { place: \"Ilsan, South Korea\" },\n    \"Allen\" : { place: \"Allen, United States\" },\n    \"Cairo\" : { place: \"Cairo, Egypt\" },\n    \"Seoul\" : { place: \"Seoul, South Korea\" },\n    \"Addis Ababa\" : { place: \"Addis Ababa, Ethiopia\" },\n    \"Patras\" : { place: \"Patras, Greece\" },\n    \"Suzhou\" : { place: \"Suzhou, China\" },\n    \"Lima\" : { place: \"Lima, Peru\" },\n    \"Mexico City\" : { place: \"Mexico City, Mexico\" },\n    \"Bangkok\" : { place: \"Bangkok, Thailand\" },\n    \"Bucharest\" : { place: \"Bucharest, Romania\" },\n    \"Dhaka\" : { place: \"Dhaka, Bangladesh\" },\n    \"Kabul\" : { place: \"Kabul, Afghanistan\" },\n    \"Kingston\" : { place: \"Kingston, Jamaica\" },\n\n    //in-game region names from pokemon franchise\n    \"Kanto\" : { place: \"Kanto Region\" },\n    \"Johto\" : { place: \"Johto Region\" },\n    \"Hoenn\" : { place: \"Hoenn Region\" },\n    \"Sinnoh\" : { place: \"Sinnoh Region\" },\n    \"Unova\": { place: \"Unova Region\" },\n    \"Kalos\": { place: \"Kalos Region\" },\n    \"Alola\" : { place: \"Alola Region\"},\n    \"Galar\" : { place: \"Galar Region\"},\n\n    //routes in region\n    // Route 20\n    // Route 8 \n    // Route 7 \n    // Route 13 \n    // Route 213 \n    // Route 4\n    // Route 113\n    // Route 36 \n     \n     \n    \n\n\t//time \n\t\"one\" : { level: \"1\" },\n    \"two\" : { level: \"2\" },\n    \"three\" : { level: \"3\"},\n    \"four\": { level: \"4\" },\n    \"five\": { level: \"5\" },\n    \"six\": { level: \"6\" },\n    \"seven\": { level: \"7\" },\n    \"eight\": { level: \"8\" },\n    \"nine\": { level: \"9\" },\n    \"ten\": { level: \"10\" },\n    \"eleven\": { level: \"11\" },\n    \"twelve\": { level: \"12\" },\n    \"thirteen\": { level: \"13\" },\n    \"fourteen\": { level: \"14\" },\n    \"fifteen\": { level: \"15\" },\n    \"sixteen\": { level: \"16\" },\n    \"seventeen\": { level: \"17\" },\n    \"eighteen\": { level: \"18\" },\n    \"nineteen\": { level: \"19\" },\n    \"twenty\": { level: \"20\" },\n    \"twenty one\": { level: \"21\" },\n    \"twenty two\": { level: \"22\" },\n    \"twenty three\": { level: \"23\" },\n    \"twenty four\": { level: \"24\" }\n}\n\n\nconst grammar2 : { [index: string]: boolean }= { \n\n                  \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n                  \"okay\": true,\n                  \"Okay\": true,\n                  \"Yup\": true,\n                  \"yup\": true,\n                  \"Ja\": true,\n                  \"ja\": true,\n                  \"No\": false,\n\t\t\t\t  \"no\" : false,\n                  \"Nej\": false,\n                  \"nej\": false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\n\nconst grammar3 ={\"count\": 0}\n\nconst help_commands = {\"help\": \"Help\", \"Help\": \"Help\"}\n\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\t\twelcome: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"query\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: [assign((context) => { return { option: context.recResult } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n                },\n\n                {target: \"welcome_help\",\n                cond: (context) => context.recResult in help_commands}], \n                \n\n                MAXSPEECH: [{\n                    target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}]\n            },\n\n            states: {        \n                prompt: {\n                entry: say(\"Pokedex online. Select feature.\"),\n                on: { ENDSPEECH: \"ask\" }\n            },\n\n            hist: {type: \"history\"},\n\n            maxspeech: {\n                ...speech(\"Please respond. What Pokemon have you come across?\")\n        },  \n\n            ask: {\n                entry: [listen(), send('MAXSPEECH', {delay: 6000})]\n            }\n        }   \n    }, \n    \n        welcome_help:{\n            ...help(\"This is the Pokedex, a repository of information. Please tell me which Pokemon you encountered.\", \"welcome\")\n            \n        },\n\n\t\tquery: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data), cancel(\"maxsp\")]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: [(context, event) => console.log(event.data), cancel(\"maxsp\")]\n                }\n            }\n        },\n      \n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    //{ target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    //{ target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"pokedex\", cond: (context) => context.option === \"pokedex\" }\n                ]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. You chose ${context.option}.`\n                    })),\n        },\n\n                 nomatch: {\n                    entry: say(\"Sorry, please repeat again.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n        // todo: {\n        //     initial: \"prompt\",\n        //     on: { ENDSPEECH: \"init\" },\n        //     states: {\n        //         prompt: {\n        //             entry: send((context) => ({\n        //                 type: \"SPEAK\",\n        //                 value: `Let\"s create a to do item!`\n        //             }))\n        //         }}\n        // },\n        \n        // timer: {\n        //     initial: \"prompt\",\n        //     on: { ENDSPEECH: \"init\" },\n        //     states: {\n        //         prompt: {\n        //             entry: send((context) => ({\n        //                 type: \"SPEAK\",\n        //                 value: `Let\"s create a timer!`\n        //             }))\n        //         }}\n        // },\n        \n        \n         pokedex: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"pokemon\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let us make a Pokemon entry into the national Pokedex!`\n                    }))\n                }}\n        },\n\n        pokemon: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    target: \"place\",\n                    cond: (context) => \"pokemon\" in (grammar[context.recResult] || {}),\n                    actions: [assign((context) => { return { pokemon: grammar[context.recResult].pokemon } }),assign((context) => { grammar3[\"count\"]=0}), cancel(\"maxsp\")],\n                    \n\n                },\n\n                { target: \".nomatch\" ,\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n\n                 {target: \"pokemon_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                 \n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n            },\n\n            states: {\n                prompt: {\n                    entry: say(\"Which Pokemon have you seen?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n                ask: {\n                    entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n                },\n                maxspeech: {\n                    ...speech(\"Please respond, what is the Pokemon you have seen?\")\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know that Pokemon.\"),\n                    on: { ENDSPEECH:  \"prompt\" }\n                \n                }\n             }\n        },\n\n        pokemon_help:{\n            ...help(\"Please tell me the name of the pokemon you want to input data for.\",\"pokemon\")\n        },\n\n        place: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t             actions: [assign((context) => { return { place: grammar[context.recResult].place } }),assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")],\n\t\t            target: \"shiny\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" ,\n                cond: (context) => !(context.recResult in help_commands),\n                actions: cancel(\"maxsp\")},\n                {target: \"place_help\",\n                cond: (context) => context.recResult in help_commands}],\n                MAXSPEECH: [{target:\".maxspeech\",\n                cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },{target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t        },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `You have come across a ${context.pokemon}. What region have you made this encounter in?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n                hist: {type: \"history\"},\n\t\t        ask: {\n\t\t            entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t            },\n                maxspeech: {\n                 ...speech(\"Please respond. Which region did you make your encounter in?\")\n              },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry, I don't know which region or place you are talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n        place_help:{\n            ...help(\"Please tell me where your encounter was.\",\"place\")\n        },\n        \n\t    shiny: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\",\n                        actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t            },\n\n\t                { target: \".nomatch\",\n                    cond: (context) => !(context.recResult in help_commands),\n                    actions: cancel(\"maxsp\")},\n                    {target: \"shiny_help\",\n                    cond: (context) => context.recResult in help_commands}],\n                    \n                    MAXSPEECH: [{target:\".maxspeech\",\n                    cond: (context) => grammar3[\"count\"] <= 2,\n                    actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                    },\n                    {target: \"#root.dm.init\", \n                    cond: (context) => grammar3[\"count\"] > 2, \n                    actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t        },\n\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Interesting. The encounter was in ${context.place}. Tell me, was this a shiny Pokemon?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n                    hist: {type: \"history\"},\n\t\t            \n                    ask: {\n\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t            },\n                    \n                    maxspeech: {\n                      ...speech(\"Please respond.\")\n                    },\n\t\t            \n                    nomatch: {\n\t\t\t            entry: say(\"Please answer the question.\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            \n            shiny_help:{\n                ...help(\"Please answer the question with yes or no.\",\"shiny\")\n            },\n            \n            timefixed: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]},\n\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t   cond: (context) => grammar2[context.recResult] === false,\n                           target: \"pokemon\",\n                           actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\t\t\t\t\t\t   \n\t\t                },\n\n\t\t                { target: \".nomatch\",\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        \n                        {target: \"timefixed_help\",\n                        cond: (context) => context.recResult in help_commands}],\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                        actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                        },\n                        {target: \"#root.dm.init\", \n                        cond: (context) => grammar3[\"count\"] > 2, \n                        actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Superb. Do you want me to confirm an entry with an encounter with a shiny ${context.pokemon} in ${context.place}?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n                        hist: {type: \"history\"},\n\t\t                \n                        ask: {\n\t\t\t                entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t                },\n\n                        maxspeech: {\n                             ...speech(\"Please, respond. Confirm the Pokedex entry.\")},\n\t\t                \n                        nomatch: {\n\t\t\t                entry: say(\"Please, repeat it again.\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n\n                timefixed_help:{\n                    ...help(\"Confirm the Pokedex entry, please.\",\"timefixed\")\n                },\n\n\t\t\t\tsettime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: [assign((context) => { return { level: grammar[context.recResult].time } }),assign((context) => { grammar3[\"count\"]=0})],\n\t\t\t\t\t\t\ttarget: \"confirm_time\"\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\t{ target: \".nomatch\" ,\n                        cond: (context) => !(context.recResult in help_commands),\n                        actions: cancel(\"maxsp\")},\n                        {target: \"settime_help\",\n                        cond: (context) => context.recResult in help_commands}],\n\n                        MAXSPEECH: [{target:\".maxspeech\",\n                        cond: (context) => grammar3[\"count\"] <= 2,\n                        actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                        },{target: \"#root.dm.init\", \n                        cond: (context) => grammar3[\"count\"] > 2, \n                        actions:assign((context) => { grammar3[\"count\"]=0})}]  \n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What level is the Pokemon}?\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n                    hist: {type: \"history\"},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t\t\t},\n                maxspeech: {\n                  ...speech(\"Please respond. What level was the Pokemon you encountered?\")\n                },\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n        settime_help:{\n            ...help(\"Please, tell me what level the Pokemon was.\",\"settime\")\n        },\n        \n\t\tconfirm_time: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\",\n                    actions: assign((context) => { grammar3[\"count\"]=0})},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"pokemon\",\n                    actions: [assign((context) => { grammar3[\"count\"]=0}),cancel(\"maxsp\")]\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\",\n                 cond: (context) => !(context.recResult in help_commands),\n                 actions: cancel(\"maxsp\")},\n                 {target: \"confirm_time_help\",\n                 cond: (context) => context.recResult in help_commands}],\n                \n                 MAXSPEECH: [{target:\".maxspeech\",\n                 cond: (context) => grammar3[\"count\"] <= 2,\n                actions: assign((context) => { grammar3[\"count\"]=grammar3[\"count\"]+1 } )\n                },\n            \n                {target: \"#root.dm.init\", \n                cond: (context) => grammar3[\"count\"] > 2, \n                actions:assign((context) => { grammar3[\"count\"]=0})}] \n\t\t\t },\n\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Excellent. Do you want me to confirm an entry with an encounter with a level ${context.level} ${context.pokemon} in ${context.place}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n                 hist: {type: \"history\"},\n\t\t\t\t \n                 ask: {\n\t\t\t\t\t entry: [listen(), send('MAXSPEECH', {delay: 6000, id: \"maxsp\"})]\n\t\t\t\t },\n\n                maxspeech: {\n                 ...speech(\"Please, confirm the Pokedex entry.\")\n                },    \n                    \n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please, repeat it again.\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n        confirm_time_help:{\n            ...help(\"Please, confirm the Pokedex entry.\",\"confirm_time\")\n        },\n        \n        Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Congratulations. Your Pokedex has been updated with your encounter and is one step closer to being completed!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n\n\n\t\t\t/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = \"https://appointment--app.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n"]},"metadata":{},"sourceType":"module"}