{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","prompt","entry","ENDSPEECH","ask","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","nomatch","todo","timer","appointment","who","wholeday","timefixed","settime","withtime","Finished","fetch","Request","proxyurl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.ccabf94a.chunk.js","sourcesContent":["import { MachineConfig, Machine, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send(\"LISTEN\")\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } \n} = {\n    // Here are some common names in English that I found are easier for the robot to understand.\n    \"John\": { person: \"John Appleseed\" },\n    \"Jack\": { person: \"Jack Orangeseed\" },\n    \"David\": { person: \"David Grapeseed\" },\n    \"Robert\": { person: \"Robert Watermelonseed\" },\n    \"Jennifer\": { person: \"Jennifer Bananaseed\" },\n    \"Jessica\": { person: \"Jessica Pineappleseed\" },\n\n    \"john\": { person: \"john appleseed\" },\n    \"jack\": { person: \"jack orangeseed\" },\n    \"david\": { person: \"david grapeseed\" },\n    \"robert\": { person: \"robert watermelonseed\" },\n    \"jennifer\": { person: \"jennifer bananaseed\" },\n    \"jessica\": { person: \"jessica pineappleseed\" },\n\n    // Here are names of friends I tried at first, but because they're non-English it was incredibly hard to move forward with the robot so I mad the previously mentioned English names above.\n    \"Zhe\": { person: \"Zhe Han\" },\n    \"Siyi\": { person: \"Siyi Gu\" },\n    \"Jae Eun\": { person: \"Jae Eun Hong\" },\n    \"Oreen\": { person: \"Oreen Yousuf\" },\n    \"Angeliki\": { person: \"Angeliki Zagoura\" },\n    \"Flor\": { person: \"Flor Ortiz\" },\n    \"Emma\": { person: \"Emma Wallerö\"},\n\n    \"zhe\": { person: \"zhe han\" },\n    \"siyi\": { person: \"siyi gu\" },\n    \"jae eun\": { person: \"jae eun hong\" },\n    \"oreen\": { person: \"oreen yousuf\" },\n    \"angeliki\": { person: \"angeliki zagoura\" },\n    \"flor\": { person: \"flor ortiz\" },\n    \"emma\": { person: \"emma wallerö\" },\n\n    //Days of the week with alternating potential utterances ('on')\n    \"Monday\": { day: \"Monday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n\n    //times with different utterances and spellings/numberings to capture all ways the robot could interpret it\n    \"at one\": { time: \"01:00\" },\n    \"at two\": { time: \"02:00\" },\n    \"at three\": { time: \"03:00\" },\n    \"at four\": { time: \"04:00\" },\n    \"at five\": { time: \"05:00\" },\n    \"at six\": { time: \"06:00\" },\n    \"at seven\": { time: \"07:00\" },\n    \"at eight\": { time: \"08:00\" },\n    \"at nine\": { time: \"09:00\" },\n    \"at ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" },\n    \"at twelve\": { time: \"12:00\" },\n    \"at thirteen\": { time: \"13:00\" },\n    \"at fourteen\": { time: \"14:00\" },\n    \"at fifteen\": { time: \"15:00\" },\n    \"at sixteen\": { time: \"16:00\" },\n    \"at seventeen\": { time: \"17:00\" },\n    \"at eighteen\": { time: \"18:00\" },\n    \"at nineteen\": { time: \"19:00\" },\n    \"at twenty\": { time: \"20:00\" },\n    \"at twenty one\": { time: \"21:00\" },\n    \"at twenty two\": { time: \"22:00\" },\n    \"at twenty three\": { time: \"23:00\" },\n    \"at twenty four\": { time: \"00:00\" },\n\n    \"one\": { time: \"01:00\" },\n    \"two\": { time: \"02:00\" },\n    \"three\": { time: \"03:00\" },\n    \"four\": { time: \"04:00\" },\n    \"five\": { time: \"05:00\" },\n    \"six\": { time: \"06:00\" },\n    \"seven\": { time: \"07:00\" },\n    \"eight\": { time: \"08:00\" },\n    \"nine\": { time: \"09:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"eleven\": { time: \"11:00\" },\n    \"twelve\": { time: \"12:00\" },\n    \"thirteen\": { time: \"13:00\" },\n    \"fourteen\": { time: \"14:00\" },\n    \"fifteen\": { time: \"15:00\" },\n    \"sixteen\": { time: \"16:00\" },\n    \"seventeen\": { time: \"17:00\" },\n    \"eighteen\": { time: \"18:00\" },\n    \"nineteen\": { time: \"19:00\" },\n    \"twenty\": { time: \"20:00\" },\n    \"twenty one\": { time: \"21:00\" },\n    \"twenty two\": { time: \"22:00\" },\n    \"twenty three\": { time: \"23:00\" },\n    \"twenty four\": { time: \"00:00\" },\n\n    \"at 1\": { time: \"01:00\" },\n    \"at 2\": { time: \"02:00\" },\n    \"at 3\": { time: \"03:00\" },\n    \"at 4\": { time: \"04:00\" },\n    \"at 5\": { time: \"05:00\" },\n    \"at 6\": { time: \"06:00\" },\n    \"at 7\": { time: \"07:00\" },\n    \"at 8\": { time: \"08:00\" },\n    \"at 9\": { time: \"09:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"at 14\": { time: \"14:00\" },\n    \"at 15\": { time: \"15:00\" },\n    \"at 16\": { time: \"16:00\" },\n    \"at 17\": { time: \"17:00\" },\n    \"at 18\": { time: \"18:00\" },\n    \"at 19\": { time: \"19:00\" },\n    \"at 20\": { time: \"20:00\" },\n    \"at 21\": { time: \"21:00\" },\n    \"at 22\": { time: \"22:00\" },\n    \"at 23\": { time: \"23:00\" },\n    \"at 24\": { time: \"00:00\" },\n\n    \"1\": { time: \"01:00\" },\n    \"2\": { time: \"02:00\" },\n    \"3\": { time: \"03:00\" },\n    \"4\": { time: \"04:00\" },\n    \"5\": { time: \"05:00\" },\n    \"6\": { time: \"06:00\" },\n    \"7\": { time: \"07:00\" },\n    \"8\": { time: \"08:00\" },\n    \"9\": { time: \"09:00\" },\n    \"10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \"20\": { time: \"20:00\" },\n    \"21\": { time: \"21:00\" },\n    \"22\": { time: \"22:00\" },\n    \"23\": { time: \"23:00\" },\n    \"24\": { time: \"00:00\" }\n}\n\n//second grammar for trues and falses\nconst grammar2 = {\n    \"yes\": true,\n    \"Yes\": true,\n    \"yes of course\": true,\n    \"Yes of course\": true,\n    \"sure\": true,\n    \"Sure\": true,\n    \"absolutely\": true,\n    \"Absolutely\": true,\n    \"perfect\": true,\n    \"Perfect\": true,\n    \"no\": false,\n    \"No\": false,\n    \"no way\": false,\n    \"No way\": false\n}\n\n\n/*function promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: \"prompt\",\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: \"ask\" }\n            },\n            ask: {\n                entry: send(\"LISTEN\")\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: \"init\",\n    states: {\n        init: {\n            on: {\n                CLICK: \"welcome\"\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"What would you like to do? Your options are appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: \"rasa\",\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: \"menu\",\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: \"welcome\",\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: \"todo\", cond: (context) => context.option === \"todo\" },\n                    { target: \"timer\", cond: (context) => context.option === \"timer\" },\n                    { target: \"appointment\", cond: (context) => context.option === \"appointment\" }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        }, \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let\"s create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"wholeday\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I do not understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        wholeday: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n                }\n\t},\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I do not know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n        confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (grammar2[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry I do not understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t           }\n                }\n\n\t},\n    confirm_time: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (grammar2[context.recResult] === false),\n                target: \"who\"\n            },\n    {cond: (context) => (grammar2[context.recResult] === true),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry I do not understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n*/\n\nfunction promptAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = \n\n({\n    initial: 'init',\n    states: \n    \n    {\n        init:{\n            on: {\n                CLICK: 'welcome'\n                }\n             },\n\n        welcome: \n        {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAsk(\"What would you like to do?\")\n        },\n\n        query: \n        {\n            invoke: {\n            \n            id: 'rasa',\n            src: (context, event) => nluRequest(context.option),\n            onDone: {\n                target: 'menu',\n                actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                (context: SDSContext, event: any) => console.log(event.data)]\n            },\n            onError: {\n                target: 'welcome',\n                actions: (context, event) => console.log(event.data)\n\n                }\n            }\n        },\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I see.`\n                    })),\n        },\n                 nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n\n        who: \n        \n        {\n            initial: \"prompt\",\n            on: \n            {\n                RECOGNISED: \n                [\n                    {\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n                    },\n                { target: \".nomatch\" }\n                ]\n            },\n\n            states: \n            \n            {\n                prompt: \n                \n                {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                \n                ask: \n                \n                {\n                    entry: listen()\n                },\n                \n                nomatch: \n                \n                {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n\n        day: \n        \n        {\n            initial: \"prompt\",\n            on: \n            \n            {\n\t            RECOGNISED: \n                [\n                    {\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t            },\t\n\n\t\t            { target: \".nomatch\" }\n                \n                ]\n\t        },\n\n            states: \n\n            {\n                prompt: \n                \n                {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: \n                \n                {\n\t\t            entry: listen()\n\t            },\n\n\t\t        nomatch: \n                \n                {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\n\n\t    wholeday: \n        \n        {\n\t\t        initial: \"prompt\",\n\t\t        on: \n                \n                {\n\t                RECOGNISED: \n                    \n                    [\n                        {cond: (context) => grammar2[context.recResult] === true,\n                        target: \"timefixed\"},\n\n\t\t\t\t\t\t{cond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"settime\"},\n\n\t                { target: \".nomatch\" }\n                    ]\n\t\t        \n                },\n\n\n\t\t        states: \n                \n                {\n\t\t            prompt: \n                    \n                    {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good. Appointment is on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\n\t\t            nomatch: \n\n                    {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n        },\n\n\n            timefixed: \n            \n            {\n\t\t           initial: \"prompt\",\n\n\t               on: \n                   \n                   {\n\t\t               RECOGNISED: \n                       \n                       [\n                           {cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {cond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"},\n\t\t                   { target: \".nomatch\" }\n                        ]\n\t\t            },\n\n\n\n\t\t            states: \n                    \n                    {\n\t\t                prompt: \n                        \n                        {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\n\n\t\t                ask: \n                        \n                        {\n\t\t\t                entry: listen()\n\t\t                },\n\n\t\t                nomatch: \n                        \n                        {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t        },\n\n\t\t\tsettime: \n                \n                    {\n\n\t\t\t\t\t    initial: \"prompt\",\n\t\t\t\t\t    on: \n                    \n                    {\n\t\t\t\t\t\tRECOGNISED: \n                        [\n                            {\n\t\t\t\t\t\t\t\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time }}),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t    },\n\n\t\t\t\t\t\t    { target: \".nomatch\" }\n                        ]\n\t\t\t\t\t},\n\n\n\t\t\t\t\t    states: \n\n                        {\n\t\t\t\t\t\t    prompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\t    on: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t    },\n\n\t\t\t\t\task: \n                    {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t    },\n\n\t\t\t\tnomatch:\n                \n                {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t            }\n\t\t                \n                    },\n\n\n\t\twithtime: \n        \n        {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: \n            \n            {\n\t\t\t\tRECOGNISED: \n                [\n                    \n                    { \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"\n                    },\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\t\t\t\t    },\n\t\t\t\t    { target: \".nomatch\" }\n                ]\n\t\t\t},\n\n\n\t\t\t states: \n             \n            {\n\t\t\t\t prompt: \n                 \n                 {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\n\t\t\t\t ask: \n                {\n\t\t\t\t\t entry: listen()\n\t\t\t\t},\n\n\t\t\t\t nomatch: \n                 \n                 {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t}\n\t\t},\n\n                Finished: \n                \n                {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: \n                        {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")},\n\t                    }\n\t            }\t    \n    }\n\n})\n\n\n\n\n\n\n//the api for rasa to use\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\"; // have to set up temporary permission/access for the robot to not give error: \"Unexpected token S in JSON at position 0\"\nconst rasaurl = \"https://intents-oyousuf.herokuapp.com/model/parse\"\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: \"POST\",\n        headers: { \"Origin\": \"http://localhost:3000/react-xstate-colourchanger\" },\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://intents-oyousuf.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}